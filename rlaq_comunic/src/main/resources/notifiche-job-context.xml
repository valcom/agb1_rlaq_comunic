<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
 	 	
    <context:annotation-config />

	<context:component-scan base-package="it.inps.entrate.rlaq.batch" />
	

	<batch:step id="abstractStep" abstract="true">
		<batch:tasklet transaction-manager="transactionManager" task-executor="taskExecutor">
			<batch:chunk  processor-transactional="false" commit-interval="1" retry-limit="10">
				<batch:skip-policy>
					<bean class="org.springframework.batch.core.step.skip.AlwaysSkipItemSkipPolicy" scope="step" />
				</batch:skip-policy>
				<batch:retryable-exception-classes>
					<batch:include class="org.springframework.dao.DeadlockLoserDataAccessException" />
				</batch:retryable-exception-classes>
			</batch:chunk>
		</batch:tasklet>
		<batch:listeners>
			<batch:listener ref="logListener" />
			<batch:listener ref="exceptionListener" />
		</batch:listeners>
	</batch:step>

	<batch:flow id="comunicazioniFlow">
		
		<decision id="preparazioneDecision" decider="preparazioneDecider">
	        <next on="ENABLED" to="preparazioneStep" />
	        <next on="DISABLED" to="invioDecision" />
	    </decision>
		
		<batch:step id="preparazioneStep" parent="abstractStep" next="invioDecision">
			<batch:tasklet>
				<batch:chunk reader="preparazioneReader" processor="preparazioneProcessor" writer="preparazioneWriter"/>
			</batch:tasklet>
		</batch:step>
		
		<decision id="invioDecision" decider="invioDecider">
	        <next on="ENABLED" to="invioStep" />
	        <next on="DISABLED" to="interrogazioneDecision" />
	    </decision>
		
		<batch:step id="invioStep" parent="abstractStep" next="interrogazioneDecision">
			<batch:tasklet>
				<batch:chunk reader="invioReader" processor="invioProcessor" writer="invioWriter"/>
			</batch:tasklet>
		</batch:step>
		
		<decision id="interrogazioneDecision" decider="interrogazioneDecider">
	        <next on="ENABLED" to="invioStep" />
	        <next on="DISABLED" to="interrogazioneDecision" />
	    </decision>
	
	
	</batch:flow>
	

<!-- DEFINIZIONE JOB -->
	<batch:job id="comunicazioniJob" restartable="false" job-repository="jobRepository">
	
		
		

		<batch:listeners>
			<batch:listener ref="logListener" />
		</batch:listeners>
	</batch:job>

	<!-- STEP INVIO COMUNICAZIONI -->

	<bean id="handler4InvioComunicazioni"
		class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler">
		<property name="taskExecutor" ref="taskExecutor" />
		<property name="step" ref="invioComunicazioniStep" />
		<property name="gridSize" value="${threadpool}" />
	</bean>
	
	<batch:step id="invioComunicazioniStep" parent="abstractStep">
		<batch:tasklet>
			<batch:chunk reader="invioComunicazioniReader" processor="invioComunicazioniProcessor" writer="allertaComunicazioniWriter" />
		</batch:tasklet>
	</batch:step>

	<bean id="invioComunicazioniReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">
		<property name="dataSource" ref="allertaDS" />
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass" value="it.inps.allerta.notifiche.data.entity.AllComunicazione" />
			</bean>
		</property>

		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="allertaDS" />
				<property name="selectClause" value="SELECT *" />
				<property name="fromClause" value="FROM ${ALLERTA_SCHEMA}ALLCOMUNICAZIONE" />				
				<property name="whereClause" value="WHERE ID_STATO in(:daInviare,:inErroreInvio) AND (ID_COMUNICAZIONE % :numTotThread) = :item" />
				<property name="sortKey" value="ID_COMUNICAZIONE"/>
			</bean>
		</property>
		<property name="parameterValues">
			<map>
				<entry key="daInviare" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).DA_INVIARE.getCodice()}" />
				<entry key="inErroreInvio" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).ERRORE_INVIO.getCodice()}" />
				<entry key="numTotThread" value="#{${threadpool}*${nIstanzeAttive:1}}" />
				<entry key="item" value="#{stepExecutionContext[item]}" />
			</map>
		</property>
		<property name="saveState" value="true" />
		<property name="pageSize" value="${pageSize}"/>
	</bean>

	<bean id="invioComunicazioniProcessor" class="it.inps.allerta.notifiche.batch.processor.InvioComunicazioniProcessor" scope="step" />

	<bean id="allertaComunicazioniWriter" class="it.inps.allerta.notifiche.batch.writer.AllertaComunicazioniWriter" scope="step" />
	<!-- FINE STEP INVIO COMUNICAZIONI -->
	
	<!-- INTERROGAZIONE -->
	<batch:step id="stepInterrogazioneComunicazioni" parent="abstractStep">
		<batch:tasklet>
			<batch:chunk reader="interrogazioneComunicazioniJdbcItemReader" processor="interrogazioneComunicazioniProcessor" writer="allertaComunicazioniWriter"/>
		</batch:tasklet>
	</batch:step>


	<bean id="interrogazioneComunicazioniJdbcItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">
		<property name="dataSource" ref="allertaDS" />
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass" value="it.inps.allerta.notifiche.data.entity.AllComunicazione" />
			</bean>
		</property>
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="allertaDS" />
				<property name="selectClause" value="SELECT *" />
				<property name="fromClause" value="FROM ${ALLERTA_SCHEMA}ALLCOMUNICAZIONE" />				
				<property name="whereClause" value="WHERE ID_STATO in(:inviata,:interrogata,:inErroreInterrogazione) AND (ID_COMUNICAZIONE % :numTotThread) = :item" />
				<property name="sortKey" value="ID_COMUNICAZIONE"/>
			</bean>
		</property>
		<property name="parameterValues">
			<map>
				<entry key="inviata" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).INVIATA.getCodice()}" />
				<entry key="interrogata" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).INTERROGATA.getCodice()}" />
				<entry key="inErroreInterrogazione" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).ERRORE_INTERROGAZIONE.getCodice()}" />
				<entry key="numTotThread" value="#{${threadpool}*${nIstanzeAttive:1}}" />
				<entry key="item" value="#{stepExecutionContext[item]}" />
			</map>
		</property>
		
		<property name="saveState" value="true" />
		<property name="pageSize" value="${pageSize}"/>
	</bean>
	
	<bean id="interrogazioneComunicazioniProcessor" class="it.inps.allerta.notifiche.batch.processor.InterrogazioneComunicazioniProcessor" scope="step"/>
		
	<bean id="handler4interrogazione" class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler">
		<property name="taskExecutor" ref="taskExecutor" />
		<property name="step" ref="stepInterrogazioneComunicazioni" />
		<property name="gridSize" value="${threadpool}" />
	</bean>
	
	<!-- RECUPERO RICEVUTE PEC -->
	
	<batch:step id="stepRecuperoRicevutePec" parent="abstractStep">
		<batch:tasklet>
			<batch:chunk reader="recuperoRicevutePecJdbcItemReader" processor="recuperoRicevutePecProcessor" writer="allertaComunicazioniWriter"/>
		</batch:tasklet>
	</batch:step>


	<bean id="recuperoRicevutePecJdbcItemReader" class="org.springframework.batch.item.database.JdbcPagingItemReader" scope="step">
		<property name="dataSource" ref="allertaDS" />
		<property name="rowMapper">
			<bean class="org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name="mappedClass" value="it.inps.allerta.notifiche.data.entity.AllComunicazione" />
			</bean>
		</property>
		<property name="queryProvider">
			<bean
				class="org.springframework.batch.item.database.support.SqlPagingQueryProviderFactoryBean">
				<property name="dataSource" ref="allertaDS" />
				<property name="selectClause" value="SELECT *" />
				<property name="fromClause" value="FROM ${ALLERTA_SCHEMA}ALLCOMUNICAZIONE" />				
				<property name="whereClause" value="WHERE ID_STATO in(:erroreRicevutaPec,:interrogataFinale,:ricevutaPecParziale) AND (ID_COMUNICAZIONE % :numTotThread) = :item" />
				<property name="sortKey" value="ID_COMUNICAZIONE"/>
			</bean>
		</property>
		<property name="parameterValues">
			<map>
				<entry key="erroreRicevutaPec" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).ERRORE_RICEVUTA_PEC.getCodice()}" />
				<entry key="interrogataFinale" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).INTERROGATA_FINALE.getCodice()}" />
				<entry key="ricevutaPecParziale" value="#{T(it.inps.allerta.notifiche.data.enums.StatoComunicazione).RICEVUTA_PEC_PARZIALE.getCodice()}" />
				<entry key="numTotThread" value="#{${threadpool}*${nIstanzeAttive:1}}" />
				<entry key="item" value="#{stepExecutionContext[item]}" />
			</map>
		</property>
		
		<property name="saveState" value="true" />
		<property name="pageSize" value="${pageSize}"/>
	</bean>
	
	<bean id="recuperoRicevutePecProcessor" class="it.inps.allerta.notifiche.batch.processor.RecuperoRicevutePecProcessor" scope="step"/>
		
	<bean id="handler4recupero" class="org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler">
		<property name="taskExecutor" ref="taskExecutor" />
		<property name="step" ref="stepRecuperoRicevutePec" />
		<property name="gridSize" value="${threadpool}" />
	</bean>
	

	<!-- COMPONENTI SPRING BATCH -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${threadpool}" />
		<property name="maxPoolSize" value="${threadpool}" />
	</bean>

	<!-- JOB TIER -->
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	<!-- JOB TIER fine -->

	<import resource="classpath:allerta-service-context.xml" />
	<import resource="classpath:allerta-data-context.xml" />
	<import resource="classpath:allerta-beanResources.xml" />
	<import resource="classpath:ws-icona-context.xml" />
		
</beans>